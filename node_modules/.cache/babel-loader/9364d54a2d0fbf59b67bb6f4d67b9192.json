{"ast":null,"code":"import _slicedToArray from \"C:/Users/rolis/source/repos/radio_api/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/rolis/source/repos/radio_api/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rolis/source/repos/radio_api/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/rolis/source/repos/radio_api/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/rolis/source/repos/radio_api/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rolis/source/repos/radio_api/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\rolis\\\\source\\\\repos\\\\radio_api\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nfunction t() {\n  return t = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var s = arguments[e];\n\n      for (var a in s) {\n        Object.prototype.hasOwnProperty.call(s, a) && (t[a] = s[a]);\n      }\n    }\n\n    return t;\n  }, t.apply(this, arguments);\n}\n\nvar e = {\n  name: \"name\",\n  url: \"url\",\n  homepage: \"homepage\",\n  favicon: \"favicon\",\n  tags: \"tags\",\n  country: \"country\",\n  state: \"state\",\n  language: \"language\",\n  votes: \"votes\",\n  codec: \"codec\",\n  bitrate: \"bitrate\",\n  lastCheckOK: \"lastCheckOK\",\n  lastCheckTime: \"lastCheckTime\",\n  clickTimeStamp: \"clickTimeStamp\",\n  clickCount: \"clickCount\",\n  clickTrend: \"clickTrend\",\n  random: \"random\"\n},\n    s = {\n  byUuid: \"byUuid\",\n  byName: \"byName\",\n  byNameExact: \"byNameExact\",\n  byCodec: \"byCodec\",\n  byCodexExact: \"byCodecExact\",\n  byCountry: \"byCountry\",\n  byCountryExact: \"byCountryExact\",\n  byCountryCodeExact: \"byCountryCodeExact\",\n  byState: \"byState\",\n  byStateExact: \"byStateExact\",\n  byLanguage: \"byLanguage\",\n  byLanguageExact: \"byLanguageExact\",\n  byTag: \"byTag\",\n  byTagExact: \"byTagExact\"\n};\n\nvar a = /*#__PURE__*/function () {\n  function a(t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n\n    _classCallCheck(this, a);\n\n    if (this.appName = void 0, this.hideBroken = void 0, this.baseUrl = void 0, this.fetchConfig = {\n      method: \"GET\",\n      redirect: \"follow\"\n    }, this.appName = t, this.hideBroken = e, !t) throw new Error(\"appName is required\");\n    this.fetchConfig.headers = {\n      \"user-agent\": this.appName\n    };\n  }\n\n  _createClass(a, [{\n    key: \"resolveBaseUrl\",\n    value: function () {\n      var _resolveBaseUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var t,\n            e,\n            s,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                t = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                _context.next = 3;\n                return fetch(\"http://all.api.radio-browser.info/json/servers\", t);\n\n              case 3:\n                s = _context.sent;\n\n                if (!s.ok) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return s.json();\n\n              case 7:\n                e = _context.sent;\n                return _context.abrupt(\"return\", e);\n\n              case 9:\n                throw s;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function resolveBaseUrl() {\n        return _resolveBaseUrl.apply(this, arguments);\n      }\n\n      return resolveBaseUrl;\n    }()\n  }, {\n    key: \"setBaseUrl\",\n    value: function setBaseUrl(t) {\n      this.baseUrl = t;\n    }\n  }, {\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      return this.baseUrl;\n    }\n  }, {\n    key: \"getCountries\",\n    value: function () {\n      var _getCountries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(t, e, s) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.runRequest(this.buildRequest(\"countries\", t, e), s));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getCountries(_x, _x2, _x3) {\n        return _getCountries.apply(this, arguments);\n      }\n\n      return getCountries;\n    }()\n  }, {\n    key: \"getCountryCodes\",\n    value: function () {\n      var _getCountryCodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(t, e, s) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", (t = t ? \"\".concat(t.toUpperCase()) : \"\", this.runRequest(this.buildRequest(\"countrycodes\", t, e), s)));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getCountryCodes(_x4, _x5, _x6) {\n        return _getCountryCodes.apply(this, arguments);\n      }\n\n      return getCountryCodes;\n    }()\n  }, {\n    key: \"getCodecs\",\n    value: function () {\n      var _getCodecs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(t, e) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.runRequest(this.buildRequest(\"codecs\", \"\", t), e));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getCodecs(_x7, _x8) {\n        return _getCodecs.apply(this, arguments);\n      }\n\n      return getCodecs;\n    }()\n  }, {\n    key: \"getCountryStates\",\n    value: function () {\n      var _getCountryStates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(t, e, s) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.runRequest(this.buildRequest(\"states\", t, e), s));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCountryStates(_x9, _x10, _x11) {\n        return _getCountryStates.apply(this, arguments);\n      }\n\n      return getCountryStates;\n    }()\n  }, {\n    key: \"getLanguages\",\n    value: function () {\n      var _getLanguages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(t, e, s) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.runRequest(this.buildRequest(\"languages\", t, e), s));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getLanguages(_x12, _x13, _x14) {\n        return _getLanguages.apply(this, arguments);\n      }\n\n      return getLanguages;\n    }()\n  }, {\n    key: \"getTags\",\n    value: function () {\n      var _getTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(t, e, s) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", (t = t ? t.toLowerCase() : \"\", this.runRequest(this.buildRequest(\"tags\", t, e), s)));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getTags(_x15, _x16, _x17) {\n        return _getTags.apply(this, arguments);\n      }\n\n      return getTags;\n    }()\n  }, {\n    key: \"getStationsBy\",\n    value: function () {\n      var _getStationsBy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(t, e, _a, i) {\n        var n,\n            o,\n            _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                n = _args8.length > 4 && _args8[4] !== undefined ? _args8[4] : !1;\n\n                if (s[t]) {\n                  _context8.next = 3;\n                  break;\n                }\n\n                throw new Error(\"search type does not exist: \".concat(t));\n\n              case 3:\n                e = e ? e.toLowerCase() : \"\";\n                _context8.next = 6;\n                return this.runRequest(this.buildRequest(\"stations/\".concat(t.toLowerCase()), e, _a), i);\n\n              case 6:\n                o = _context8.sent;\n                return _context8.abrupt(\"return\", this.normalizeStations(o, n));\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getStationsBy(_x18, _x19, _x20, _x21) {\n        return _getStationsBy.apply(this, arguments);\n      }\n\n      return getStationsBy;\n    }()\n  }, {\n    key: \"normalizeStations\",\n    value: function normalizeStations(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n      var s = [],\n          _a2 = {};\n\n      var _iterator = _createForOfIteratorHelper(t),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n\n          if (e) {\n            var _t2 = \"\".concat(i.name.toLowerCase().trim()).concat(i.url.toLowerCase().trim());\n\n            if (_a2[_t2]) continue;\n            _a2[_t2] = !0;\n          }\n\n          var _t = {\n            changeId: i.changeuuid,\n            id: i.stationuuid,\n            name: i.name,\n            url: i.url,\n            urlResolved: i.url_resolved,\n            homepage: i.homepage,\n            favicon: i.favicon,\n            country: i.country,\n            countryCode: i.countrycode,\n            state: i.state,\n            votes: i.votes,\n            codec: i.codec,\n            bitrate: i.bitrate,\n            clickCount: i.clickcount,\n            clickTrend: i.clicktrend,\n            hls: Boolean(i.hls),\n            lastCheckOk: Boolean(i.lastcheckok),\n            lastChangeTime: new Date(i.lastchangetime),\n            lastCheckOkTime: new Date(i.lastcheckoktime),\n            clickTimestamp: new Date(i.clicktimestamp),\n            lastLocalCheckTime: new Date(i.lastlocalchecktime),\n            language: i.language.split(\",\"),\n            lastCheckTime: new Date(i.lastchecktime),\n            geoLat: i.geo_lat,\n            geoLong: i.geo_long,\n            tags: Array.from(new Set(i.tags.split(\",\"))).filter(function (t) {\n              return t.length > 0 && t.length < 10;\n            })\n          };\n          s.push(_t);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return s;\n    }\n  }, {\n    key: \"getAllStations\",\n    value: function () {\n      var _getAllStations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(t, e) {\n        var s,\n            _a3,\n            _args9 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                s = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : !1;\n                _context9.next = 3;\n                return this.runRequest(this.buildRequest(\"stations\", \"\", t), e);\n\n              case 3:\n                _a3 = _context9.sent;\n                return _context9.abrupt(\"return\", this.normalizeStations(_a3, s));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getAllStations(_x22, _x23) {\n        return _getAllStations.apply(this, arguments);\n      }\n\n      return getAllStations;\n    }()\n  }, {\n    key: \"searchStations\",\n    value: function () {\n      var _searchStations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(t, e) {\n        var s,\n            _a4,\n            _args10 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                s = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : !1;\n                _context10.next = 3;\n                return this.runRequest(this.buildRequest(\"stations/search\", void 0, t), e);\n\n              case 3:\n                _a4 = _context10.sent;\n                return _context10.abrupt(\"return\", this.normalizeStations(_a4, s));\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function searchStations(_x24, _x25) {\n        return _searchStations.apply(this, arguments);\n      }\n\n      return searchStations;\n    }()\n  }, {\n    key: \"getStationsByClicks\",\n    value: function () {\n      var _getStationsByClicks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(t, e) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.resolveGetStations(\"topclick\", t, e));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getStationsByClicks(_x26, _x27) {\n        return _getStationsByClicks.apply(this, arguments);\n      }\n\n      return getStationsByClicks;\n    }()\n  }, {\n    key: \"getStationsByVotes\",\n    value: function () {\n      var _getStationsByVotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(t, e) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.resolveGetStations(\"topvote\", t, e));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getStationsByVotes(_x28, _x29) {\n        return _getStationsByVotes.apply(this, arguments);\n      }\n\n      return getStationsByVotes;\n    }()\n  }, {\n    key: \"getStationsByRecentClicks\",\n    value: function () {\n      var _getStationsByRecentClicks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(t, e) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this.resolveGetStations(\"lastclick\", t, e));\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getStationsByRecentClicks(_x30, _x31) {\n        return _getStationsByRecentClicks.apply(this, arguments);\n      }\n\n      return getStationsByRecentClicks;\n    }()\n  }, {\n    key: \"sendStationClick\",\n    value: function () {\n      var _sendStationClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(t, e) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.runRequest(this.buildRequest(\"url\", t, void 0, !1), e));\n\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function sendStationClick(_x32, _x33) {\n        return _sendStationClick.apply(this, arguments);\n      }\n\n      return sendStationClick;\n    }()\n  }, {\n    key: \"voteForStation\",\n    value: function () {\n      var _voteForStation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(t, e) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", this.runRequest(this.buildRequest(\"vote\", t), e));\n\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function voteForStation(_x34, _x35) {\n        return _voteForStation.apply(this, arguments);\n      }\n\n      return voteForStation;\n    }()\n  }, {\n    key: \"getStationsById\",\n    value: function () {\n      var _getStationsById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(t, e) {\n        var s, _a5;\n\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                s = t.join(\",\");\n                _context16.next = 3;\n                return this.runRequest(this.buildRequest(\"stations/byuuid?uuids=\".concat(s), void 0, void 0, !1), e);\n\n              case 3:\n                _a5 = _context16.sent;\n                return _context16.abrupt(\"return\", this.normalizeStations(_a5));\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getStationsById(_x36, _x37) {\n        return _getStationsById.apply(this, arguments);\n      }\n\n      return getStationsById;\n    }()\n  }, {\n    key: \"getStationByUrl\",\n    value: function () {\n      var _getStationByUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(t, e) {\n        var s;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.runRequest(this.buildRequest(\"stations/byurl/\".concat(t), void 0, void 0, !1), e);\n\n              case 2:\n                s = _context17.sent;\n                return _context17.abrupt(\"return\", this.normalizeStations(s));\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getStationByUrl(_x38, _x39) {\n        return _getStationByUrl.apply(this, arguments);\n      }\n\n      return getStationByUrl;\n    }()\n  }, {\n    key: \"resolveGetStations\",\n    value: function () {\n      var _resolveGetStations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(t, e, s) {\n        var _a6, i;\n\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _a6 = e ? \"/\".concat(e) : \"\";\n                _context18.next = 3;\n                return this.runRequest(this.buildRequest(\"stations/\".concat(t).concat(_a6), void 0, void 0, !1), s);\n\n              case 3:\n                i = _context18.sent;\n                return _context18.abrupt(\"return\", this.normalizeStations(i));\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function resolveGetStations(_x40, _x41, _x42) {\n        return _resolveGetStations.apply(this, arguments);\n      }\n\n      return resolveGetStations;\n    }()\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest(e, s, _a7) {\n      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;\n      var n;\n      return s = s ? \"/\".concat(encodeURIComponent(s)) : \"\", _a7 && (n = t({}, _a7), \"tagList\" in n && Array.isArray(n.tagList) && (n.tagList = _toConsumableArray(n.tagList)), i && void 0 === n.hideBroken && (n.hideBroken = this.hideBroken)), \"\".concat(e).concat(s).concat(n ? this.createQueryParams(n) : \"\");\n    }\n  }, {\n    key: \"runRequest\",\n    value: function () {\n      var _runRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(e) {\n        var s,\n            _a8,\n            _t3,\n            _e,\n            i,\n            _args19 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                s = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                _a8 = t({}, this.fetchConfig, s, {\n                  headers: t({}, this.fetchConfig.headers, s.headers)\n                });\n\n                if (this.baseUrl) {\n                  _context19.next = 8;\n                  break;\n                }\n\n                _context19.next = 5;\n                return this.resolveBaseUrl();\n\n              case 5:\n                _t3 = _context19.sent;\n                _e = Math.floor(Math.random() * _t3.length);\n                this.baseUrl = \"https://\".concat(_t3[_e].name);\n\n              case 8:\n                _context19.next = 10;\n                return fetch(\"\".concat(this.baseUrl, \"/json/\").concat(e), _a8);\n\n              case 10:\n                i = _context19.sent;\n\n                if (!i.ok) {\n                  _context19.next = 13;\n                  break;\n                }\n\n                return _context19.abrupt(\"return\", i.json());\n\n              case 13:\n                throw i;\n\n              case 14:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function runRequest(_x43) {\n        return _runRequest.apply(this, arguments);\n      }\n\n      return runRequest;\n    }()\n  }, {\n    key: \"createQueryParams\",\n    value: function createQueryParams(t) {\n      var e = \"\";\n      if (t) for (var _i = 0, _Object$entries = Object.entries(t); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            _s = _Object$entries$_i[0],\n            _a10 = _Object$entries$_i[1];\n\n        e += \"&\".concat(\"hasGeoInfo\" === _s ? \"has_geo_info\" : _s, \"=\").concat(encodeURIComponent(_a10));\n      }\n      return e ? \"?\".concat(e.slice(1).toLowerCase()) : \"\";\n    }\n  }]);\n\n  return a;\n}();\n\na.version = \"5.2.4\";\nexport { a as RadioBrowserApi, e as StationSearchOrder, s as StationSearchType };","map":{"version":3,"mappings":"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","names":["StationSearchOrder","name","url","homepage","favicon","tags","country","state","language","votes","codec","bitrate","lastCheckOK","lastCheckTime","clickTimeStamp","clickCount","clickTrend","random","StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","constructor","appName","hideBroken","baseUrl","fetchConfig","method","redirect","this","Error","headers","async","config","fetch","response","ok","json","result","setBaseUrl","getBaseUrl","search","query","runRequest","buildRequest","toUpperCase","tag","toLowerCase","searchType","removeDuplicates","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","countryCode","countrycode","clickcount","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastchecktime","geoLat","geo_lat","geoLong","geo_long","Array","from","Set","filter","length","push","undefined","limit","resolveGetStations","ids","stationsIds","join","endPoint","limitStations","addHideBrokenParam","queryCopy","encodeURIComponent","isArray","tagList","createQueryParams","finalConfig","results","resolveBaseUrl","Math","floor","params","Object","entries","key","value","slice","version"],"sources":["C:\\Users\\rolis\\source\\repos\\radio_api\\node_modules\\radio-browser-api\\src\\constants.ts","C:\\Users\\rolis\\source\\repos\\radio_api\\node_modules\\radio-browser-api\\src\\radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n  geo_lat?: number | null\n  geo_long?: number | null\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n  geoLat?: number | null\n  geoLong?: number | null\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n  hasGeoInfo?: boolean\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Record<string, any>\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    // if (typeof window !== 'undefined') {\n    //   return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    // }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        geoLat: response.geo_lat,\n        geoLong: response.geo_long,\n        tags: Array.from(new Set(response.tags.split(','))).filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${\n          key === 'hasGeoInfo' ? 'has_geo_info' : key\n        }=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n"]},"metadata":{},"sourceType":"module"}