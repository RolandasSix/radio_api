{"ast":null,"code":"function t() {\n  return t = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var s = arguments[e];\n\n      for (var a in s) Object.prototype.hasOwnProperty.call(s, a) && (t[a] = s[a]);\n    }\n\n    return t;\n  }, t.apply(this, arguments);\n}\n\nconst e = {\n  name: \"name\",\n  url: \"url\",\n  homepage: \"homepage\",\n  favicon: \"favicon\",\n  tags: \"tags\",\n  country: \"country\",\n  state: \"state\",\n  language: \"language\",\n  votes: \"votes\",\n  codec: \"codec\",\n  bitrate: \"bitrate\",\n  lastCheckOK: \"lastCheckOK\",\n  lastCheckTime: \"lastCheckTime\",\n  clickTimeStamp: \"clickTimeStamp\",\n  clickCount: \"clickCount\",\n  clickTrend: \"clickTrend\",\n  random: \"random\"\n},\n      s = {\n  byUuid: \"byUuid\",\n  byName: \"byName\",\n  byNameExact: \"byNameExact\",\n  byCodec: \"byCodec\",\n  byCodexExact: \"byCodecExact\",\n  byCountry: \"byCountry\",\n  byCountryExact: \"byCountryExact\",\n  byCountryCodeExact: \"byCountryCodeExact\",\n  byState: \"byState\",\n  byStateExact: \"byStateExact\",\n  byLanguage: \"byLanguage\",\n  byLanguageExact: \"byLanguageExact\",\n  byTag: \"byTag\",\n  byTagExact: \"byTagExact\"\n};\n\nclass a {\n  constructor(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n    if (this.appName = void 0, this.hideBroken = void 0, this.baseUrl = void 0, this.fetchConfig = {\n      method: \"GET\",\n      redirect: \"follow\"\n    }, this.appName = t, this.hideBroken = e, !t) throw new Error(\"appName is required\");\n    this.fetchConfig.headers = {\n      \"user-agent\": this.appName\n    };\n  }\n\n  async resolveBaseUrl() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let e;\n    const s = await fetch(\"http://all.api.radio-browser.info/json/servers\", t);\n    if (s.ok) return e = await s.json(), e;\n    throw s;\n  }\n\n  setBaseUrl(t) {\n    this.baseUrl = t;\n  }\n\n  getBaseUrl() {\n    return this.baseUrl;\n  }\n\n  async getCountries(t, e, s) {\n    return this.runRequest(this.buildRequest(\"countries\", t, e), s);\n  }\n\n  async getCountryCodes(t, e, s) {\n    return t = t ? `${t.toUpperCase()}` : \"\", this.runRequest(this.buildRequest(\"countrycodes\", t, e), s);\n  }\n\n  async getCodecs(t, e) {\n    return this.runRequest(this.buildRequest(\"codecs\", \"\", t), e);\n  }\n\n  async getCountryStates(t, e, s) {\n    return this.runRequest(this.buildRequest(\"states\", t, e), s);\n  }\n\n  async getLanguages(t, e, s) {\n    return this.runRequest(this.buildRequest(\"languages\", t, e), s);\n  }\n\n  async getTags(t, e, s) {\n    return t = t ? t.toLowerCase() : \"\", this.runRequest(this.buildRequest(\"tags\", t, e), s);\n  }\n\n  async getStationsBy(t, e, a, i) {\n    let n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;\n    if (!s[t]) throw new Error(`search type does not exist: ${t}`);\n    e = e ? e.toLowerCase() : \"\";\n    const o = await this.runRequest(this.buildRequest(`stations/${t.toLowerCase()}`, e, a), i);\n    return this.normalizeStations(o, n);\n  }\n\n  normalizeStations(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n    const s = [],\n          a = {};\n\n    for (const i of t) {\n      if (e) {\n        const t = `${i.name.toLowerCase().trim()}${i.url.toLowerCase().trim()}`;\n        if (a[t]) continue;\n        a[t] = !0;\n      }\n\n      const t = {\n        changeId: i.changeuuid,\n        id: i.stationuuid,\n        name: i.name,\n        url: i.url,\n        urlResolved: i.url_resolved,\n        homepage: i.homepage,\n        favicon: i.favicon,\n        country: i.country,\n        countryCode: i.countrycode,\n        state: i.state,\n        votes: i.votes,\n        codec: i.codec,\n        bitrate: i.bitrate,\n        clickCount: i.clickcount,\n        clickTrend: i.clicktrend,\n        hls: Boolean(i.hls),\n        lastCheckOk: Boolean(i.lastcheckok),\n        lastChangeTime: new Date(i.lastchangetime),\n        lastCheckOkTime: new Date(i.lastcheckoktime),\n        clickTimestamp: new Date(i.clicktimestamp),\n        lastLocalCheckTime: new Date(i.lastlocalchecktime),\n        language: i.language.split(\",\"),\n        lastCheckTime: new Date(i.lastchecktime),\n        geoLat: i.geo_lat,\n        geoLong: i.geo_long,\n        tags: Array.from(new Set(i.tags.split(\",\"))).filter(t => t.length > 0 && t.length < 10)\n      };\n      s.push(t);\n    }\n\n    return s;\n  }\n\n  async getAllStations(t, e) {\n    let s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n    const a = await this.runRequest(this.buildRequest(\"stations\", \"\", t), e);\n    return this.normalizeStations(a, s);\n  }\n\n  async searchStations(t, e) {\n    let s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n    const a = await this.runRequest(this.buildRequest(\"stations/search\", void 0, t), e);\n    return this.normalizeStations(a, s);\n  }\n\n  async getStationsByClicks(t, e) {\n    return this.resolveGetStations(\"topclick\", t, e);\n  }\n\n  async getStationsByVotes(t, e) {\n    return this.resolveGetStations(\"topvote\", t, e);\n  }\n\n  async getStationsByRecentClicks(t, e) {\n    return this.resolveGetStations(\"lastclick\", t, e);\n  }\n\n  async sendStationClick(t, e) {\n    return this.runRequest(this.buildRequest(\"url\", t, void 0, !1), e);\n  }\n\n  async voteForStation(t, e) {\n    return this.runRequest(this.buildRequest(\"vote\", t), e);\n  }\n\n  async getStationsById(t, e) {\n    const s = t.join(\",\"),\n          a = await this.runRequest(this.buildRequest(`stations/byuuid?uuids=${s}`, void 0, void 0, !1), e);\n    return this.normalizeStations(a);\n  }\n\n  async getStationByUrl(t, e) {\n    const s = await this.runRequest(this.buildRequest(`stations/byurl/${t}`, void 0, void 0, !1), e);\n    return this.normalizeStations(s);\n  }\n\n  async resolveGetStations(t, e, s) {\n    const a = e ? `/${e}` : \"\",\n          i = await this.runRequest(this.buildRequest(`stations/${t}${a}`, void 0, void 0, !1), s);\n    return this.normalizeStations(i);\n  }\n\n  buildRequest(e, s, a) {\n    let i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;\n    let n;\n    return s = s ? `/${encodeURIComponent(s)}` : \"\", a && (n = t({}, a), \"tagList\" in n && Array.isArray(n.tagList) && (n.tagList = [...n.tagList]), i && void 0 === n.hideBroken && (n.hideBroken = this.hideBroken)), `${e}${s}${n ? this.createQueryParams(n) : \"\"}`;\n  }\n\n  async runRequest(e) {\n    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const a = t({}, this.fetchConfig, s, {\n      headers: t({}, this.fetchConfig.headers, s.headers)\n    });\n\n    if (!this.baseUrl) {\n      const t = await this.resolveBaseUrl(),\n            e = Math.floor(Math.random() * t.length);\n      this.baseUrl = `https://${t[e].name}`;\n    }\n\n    const i = await fetch(`${this.baseUrl}/json/${e}`, a);\n    if (i.ok) return i.json();\n    throw i;\n  }\n\n  createQueryParams(t) {\n    let e = \"\";\n    if (t) for (const [s, a] of Object.entries(t)) {\n      let t = s;\n\n      switch (t) {\n        case \"hasGeoInfo\":\n          t = \"has_geo_info\";\n          break;\n\n        case \"hideBroken\":\n          t = \"hidebroken\";\n      }\n\n      e += `&${t}=${encodeURIComponent(a)}`;\n    }\n    return e ? `?${e.slice(1)}` : \"\";\n  }\n\n}\n\na.version = \"6.0.0\";\nexport { a as RadioBrowserApi, e as StationSearchOrder, s as StationSearchType };","map":{"version":3,"mappings":"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","names":["StationSearchOrder","name","url","homepage","favicon","tags","country","state","language","votes","codec","bitrate","lastCheckOK","lastCheckTime","clickTimeStamp","clickCount","clickTrend","random","StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","constructor","appName","hideBroken","baseUrl","fetchConfig","method","redirect","this","Error","headers","async","config","result","response","fetch","ok","json","setBaseUrl","getBaseUrl","search","query","runRequest","buildRequest","toUpperCase","tag","toLowerCase","searchType","removeDuplicates","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","countryCode","countrycode","clickcount","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastchecktime","geoLat","geo_lat","geoLong","geo_long","Array","from","Set","filter","length","push","undefined","limit","resolveGetStations","ids","stationsIds","join","endPoint","limitStations","addHideBrokenParam","queryCopy","encodeURIComponent","isArray","tagList","createQueryParams","finalConfig","results","resolveBaseUrl","Math","floor","params","key","value","Object","entries","finalKey","slice","version"],"sources":["C:\\Users\\rolis\\source\\repos\\radio_api\\node_modules\\radio-browser-api\\src\\constants.ts","C:\\Users\\rolis\\source\\repos\\radio_api\\node_modules\\radio-browser-api\\src\\radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n  geo_lat?: number | null\n  geo_long?: number | null\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n  geoLat?: number | null\n  geoLong?: number | null\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n  hasGeoInfo?: boolean\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Record<string, any>\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    // if (typeof window !== 'undefined') {\n    //   return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    // }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        geoLat: response.geo_lat,\n        geoLong: response.geo_long,\n        tags: Array.from(new Set(response.tags.split(','))).filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hidebroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && queryCopy.hideBroken === undefined) {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        let finalKey = key\n\n        switch (finalKey) {\n          case 'hasGeoInfo':\n            finalKey = 'has_geo_info'\n            break\n          case 'hideBroken':\n            finalKey = 'hidebroken'\n            break\n        }\n\n        result += `&${finalKey}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1)}` : ''\n  }\n}\n"]},"metadata":{},"sourceType":"module"}